// Generated by CoffeeScript 1.9.1
(function() {
  var Adapter, EventEmitter,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  EventEmitter = require('events').EventEmitter;

  Adapter = (function(superClass) {
    extend(Adapter, superClass);

    function Adapter(robot) {
      this.robot = robot;
    }

    Adapter.prototype.send = function() {
      var envelope, strings;
      envelope = arguments[0], strings = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    };

    Adapter.prototype.emote = function() {
      var envelope, strings;
      envelope = arguments[0], strings = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return this.send.apply(this, [envelope].concat(slice.call(strings)));
    };

    Adapter.prototype.reply = function() {
      var envelope, strings;
      envelope = arguments[0], strings = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    };

    Adapter.prototype.topic = function() {
      var envelope, strings;
      envelope = arguments[0], strings = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    };

    Adapter.prototype.play = function() {
      var envelope, strings;
      envelope = arguments[0], strings = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    };

    Adapter.prototype.run = function() {};

    Adapter.prototype.close = function() {};

    Adapter.prototype.receive = function(message) {
      return this.robot.receive(message);
    };

    Adapter.prototype.users = function() {
      this.robot.logger.warning('@users() is going to be deprecated in 3.0.0 use @robot.brain.users()');
      return this.robot.brain.users();
    };

    Adapter.prototype.userForId = function(id, options) {
      this.robot.logger.warning('@userForId() is going to be deprecated in 3.0.0 use @robot.brain.userForId()');
      return this.robot.brain.userForId(id, options);
    };

    Adapter.prototype.userForName = function(name) {
      this.robot.logger.warning('@userForName() is going to be deprecated in 3.0.0 use @robot.brain.userForName()');
      return this.robot.brain.userForName(name);
    };

    Adapter.prototype.usersForRawFuzzyName = function(fuzzyName) {
      this.robot.logger.warning('@userForRawFuzzyName() is going to be deprecated in 3.0.0 use @robot.brain.userForRawFuzzyName()');
      return this.robot.brain.usersForRawFuzzyName(fuzzyName);
    };

    Adapter.prototype.usersForFuzzyName = function(fuzzyName) {
      this.robot.logger.warning('@userForFuzzyName() is going to be deprecated in 3.0.0 use @robot.brain.userForFuzzyName()');
      return this.robot.brain.usersForFuzzyName(fuzzyName);
    };

    Adapter.prototype.http = function(url) {
      this.robot.logger.warning('@http() is going to be deprecated in 3.0.0 use @robot.http()');
      return this.robot.http(url);
    };

    return Adapter;

  })(EventEmitter);

  module.exports = Adapter;

}).call(this);

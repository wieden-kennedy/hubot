// Generated by CoffeeScript 1.9.1
(function() {
  var Listener, TextListener, TextMessage, inspect,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  inspect = require('util').inspect;

  TextMessage = require('./message').TextMessage;

  Listener = (function() {
    function Listener(robot, matcher, callback) {
      this.robot = robot;
      this.matcher = matcher;
      this.callback = callback;
    }

    Listener.prototype.call = function(message) {
      var match;
      if (match = this.matcher(message)) {
        if (this.regex) {
          this.robot.logger.debug("Message '" + message + "' matched regex /" + (inspect(this.regex)) + "/");
        }
        this.callback(new this.robot.Response(this.robot, message, match));
        return true;
      } else {
        return false;
      }
    };

    return Listener;

  })();

  TextListener = (function(superClass) {
    extend(TextListener, superClass);

    function TextListener(robot, regex, callback) {
      this.robot = robot;
      this.regex = regex;
      this.callback = callback;
      this.matcher = (function(_this) {
        return function(message) {
          if (message instanceof TextMessage) {
            return message.match(_this.regex);
          }
        };
      })(this);
    }

    return TextListener;

  })(Listener);

  module.exports = {
    Listener: Listener,
    TextListener: TextListener
  };

}).call(this);

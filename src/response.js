// Generated by CoffeeScript 1.9.1
(function() {
  var Response,
    slice = [].slice;

  Response = (function() {
    function Response(robot, message, match) {
      this.robot = robot;
      this.message = message;
      this.match = match;
      this.envelope = {
        room: this.message.room,
        user: this.message.user,
        message: this.message
      };
    }

    Response.prototype.send = function() {
      var ref, strings;
      strings = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref = this.robot.adapter).send.apply(ref, [this.envelope].concat(slice.call(strings)));
    };

    Response.prototype.emote = function() {
      var ref, strings;
      strings = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref = this.robot.adapter).emote.apply(ref, [this.envelope].concat(slice.call(strings)));
    };

    Response.prototype.reply = function() {
      var ref, strings;
      strings = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref = this.robot.adapter).reply.apply(ref, [this.envelope].concat(slice.call(strings)));
    };

    Response.prototype.topic = function() {
      var ref, strings;
      strings = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref = this.robot.adapter).topic.apply(ref, [this.envelope].concat(slice.call(strings)));
    };

    Response.prototype.play = function() {
      var ref, strings;
      strings = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref = this.robot.adapter).play.apply(ref, [this.envelope].concat(slice.call(strings)));
    };

    Response.prototype.locked = function() {
      var ref, strings;
      strings = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref = this.robot.adapter).locked.apply(ref, [this.envelope].concat(slice.call(strings)));
    };

    Response.prototype.random = function(items) {
      return items[Math.floor(Math.random() * items.length)];
    };

    Response.prototype.finish = function() {
      return this.message.finish();
    };

    Response.prototype.http = function(url, options) {
      return this.robot.http(url, options);
    };

    return Response;

  })();

  module.exports = Response;

}).call(this);
